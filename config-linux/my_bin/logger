#!/bin/bash
# jonathan zollinger's logging library. Requires bash 4.2 and gum

##############################################################################
# print error message to STDERR
# Globals:
#   None
# Arguments:
#   ErrorMessage
# Examples:
#   if ! do_something; then
#     echo_err "Unable to do_something"
#     exit 1
#   fi
# Author: github.com/Jonathan-Zollinger 
##############################################################################
function err() {
  echo "$@" >&2
  exit 1
}

##############################################################################
# print log message with applicable info to appropriate stream. all logs are 
# written to the $HOME/logs directory
#
# Globals:
#   LOG_LEVEL: if set to debug, will print debug info to log file
#
# Arguments:
#  - verbosity level (debug, info, warn or error).
#  - log message, a string.
#
# Examples:
#
# log the result of pinging google)
# if ping -c 1 google.com; then
#   log 'INFO' "It appears you have a working internet connection"
# else
#   log 'WARN' "It appears you do not have a working internet connection"
#
# Author: github.com/Jonathan-Zollinger 
##############################################################################
function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%b-%d-%y %H:%M:%S")
  local -r script_name="$(basename "$0")"
  local log="${timestamp} [${level}] [${0%/*}##$script_name] ${message}"
  mkdir -p "${HOME}/logs"
  local -r log_file="${HOME}/logs/$(date +%b-%d-%y).log"

  case "${level^^}" in 
    'ERROR')
      echo "${log}" >> "${log_file}"
      err "${log}"
    ;;

    'WARN')
      if [[ ${LOG_LEVEL^^} =~ ('DEBUG'|'INFO'|'WARN') ]]; then
        echo "{{ Color \"3\" \"${log}\" }}" | gum format -t template
      fi
      echo "${log}" >> "${log_file}"
    ;;

    'INFO')
      if [[ ${LOG_LEVEL^^} =~ ('DEBUG'|'INFO') ]]; then
        echo "{{ Color \"2\" \"${log}\" }}" | gum format -t template
      fi
      echo "${log}" >> "${log_file}"
    ;;

    'DEBUG')
    if [[ -z $LOG_LEVEL && ${LOG_LEVEL^^} == 'DEBUG'  ]]; then
      gum style --border double --align left --margin "1 1" \
        --padding "1 2" "${log}" '' "$(printenv)" \
        "$( set -o posix ; set )" >> "$HOME/logs/${log_file}"
    fi      
    ;;

    *)
      err "log level ${level^^} in log output ${log} doesn't match expected log levels."

  esac
  # TODO(Jonathan) test these varying log levels work
}

# Log the given message at INFO level.
function log_info {
  log 'INFO' "$*"
}

# Log the given message at WARN level.
function log_warn {
  log 'WARN' "$*"
}

# Log the given message at ERROR level.
function log_error {
  log 'ERROR' "$*"
}

# Log the given message to the log file. appends a report of all shell and global vars to the message. 
function log_debug {
  log 'DEBUG' "$*"
}
